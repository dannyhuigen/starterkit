// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: google_user.sql

package database_generated

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllGoogleUsers = `-- name: GetAllGoogleUsers :many
SELECT id, google_id, email, verified_email, name, picture, locale
FROM google_users
`

func (q *Queries) GetAllGoogleUsers(ctx context.Context) ([]GoogleUser, error) {
	rows, err := q.db.Query(ctx, getAllGoogleUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GoogleUser
	for rows.Next() {
		var i GoogleUser
		if err := rows.Scan(
			&i.ID,
			&i.GoogleID,
			&i.Email,
			&i.VerifiedEmail,
			&i.Name,
			&i.Picture,
			&i.Locale,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const upsertGoogleUser = `-- name: UpsertGoogleUser :exec
INSERT INTO google_users (google_id, email, verified_email, name, picture, locale)
VALUES ($1, $2, $3, $4, $5, $6)
ON CONFLICT (google_id)
    DO UPDATE
    SET email = EXCLUDED.email,
        verified_email = EXCLUDED.verified_email,
        name = EXCLUDED.name,
        picture = EXCLUDED.picture,
        locale = EXCLUDED.locale
`

type UpsertGoogleUserParams struct {
	GoogleID      string
	Email         string
	VerifiedEmail bool
	Name          pgtype.Text
	Picture       pgtype.Text
	Locale        pgtype.Text
}

func (q *Queries) UpsertGoogleUser(ctx context.Context, arg UpsertGoogleUserParams) error {
	_, err := q.db.Exec(ctx, upsertGoogleUser,
		arg.GoogleID,
		arg.Email,
		arg.VerifiedEmail,
		arg.Name,
		arg.Picture,
		arg.Locale,
	)
	return err
}
